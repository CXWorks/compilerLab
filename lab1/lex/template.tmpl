#include $incl
relist=[]
code=[]
#for $inn,$graph in $re.items()
#set $node=$graph['node']
#set $edge=$graph['edge']
#set $docode=$code[$inn]
#set $func='switch'+str($inn)
#set $codename='code'+str($inn)
#attr $token='token'

$func={}
#for $k,$v in $node.items()
def case$getVar('theVariable',$k)($token):
    way={}
    #for $n,$to in $edge[$k].items()
    #for $ways in $to['c']
    way['$ways']=$n
    #end for
    #end for
    if way.has_key(token):
        return way[token]
    else:
        #if $v.has_key('e')
        return -1206
        #else
        return -1
        #end if
$getVar('theVariable',$func)[$getVar('theVariable',$k)]=case$getVar('theVariable',$k)
#end for
relist.append($func)
def $getVar('theVariable',$codename)(yytext,start,end):
    $docode
code.append($getVar('theVariable',$codename))
#end for




#raw
def next(str,i):
    while i<len(str) and str[i]==' ' :
        i+=1
    return i
if __name__ == '__main__':
    import sys
    if len(sys.argv)<2:
        s='t.py'
    else:
        s=sys.argv[1]
    f=open(s)
    line=f.readlines()
    linnum=-1
    for l in line:
        linnum+=1
        if l[-1]!='\n':
            l+='\n'
        i=0
        while i<len(l) :
            i=next(l,i)
            start=i
            n=len(relist)
            state=[0]*n
            find=False
            while  i<len(l):
                j=0
                #do all the switch
                while j<len(state):
                    if state[j]==-1 or state[j]==-2:
                        j+=1
                        continue
                    ans=relist[j][state[j]](l[i])
                    if ans == -1:
                        n-=1
                    state[j]=ans
                    j+=1
                k=0
                for k in range(len(state)):
                    st=state[k]
                    if st == -1:
                        continue
                    elif st==-1206 and n>1:
                        state[k]=-2
                        n-=1
                    elif st==-1206 and n==1:
                        find=True
                        break
                if find :
                    #find
                    code[k](l[start:i],start,i)
                    break
                elif n==0 :
                    #not found
                    i=start+1
                    break
                else:
                    i+=1






#end raw